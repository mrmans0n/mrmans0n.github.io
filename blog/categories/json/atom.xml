<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: json | Nacho Lopez]]></title>
  <link href="http://mrmans0n.github.io/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://mrmans0n.github.io/"/>
  <updated>2013-08-16T17:22:37+02:00</updated>
  <id>http://mrmans0n.github.io/</id>
  <author>
    <name><![CDATA[Nacho Lopez]]></name>
    <email><![CDATA[nacho@nlopez.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing malformed JSON strings without quotation marks in its attribute name]]></title>
    <link href="http://mrmans0n.github.io/blog/2012/06/05/fixing-malformed-json-strings-without-quotation-marks-in-its-attribute-name/"/>
    <updated>2012-06-05T22:00:00+02:00</updated>
    <id>http://mrmans0n.github.io/blog/2012/06/05/fixing-malformed-json-strings-without-quotation-marks-in-its-attribute-name</id>
    <content type="html"><![CDATA[<p>Sometimes you find
JSON web services that doesn’t respect the format, just because javascript and some parsers also work that way. But you want to use it with a parser that only allows strict implementations.</p>

<p>So here you have a little piece of code that saved my butt (in Java). It uses String class
<strong>replaceAll</strong>
 method.</p>

<p>malformedJson.replaceAll(&ldquo;(\s)*([a-zA-Z0-9_]+?):&rdquo;, &ldquo;\&rdquo;$2\&ldquo;:&rdquo;);</p>

<p>I’m not the most knowledgeable guy with regular expressions but that one is simple enough.</p>
]]></content>
  </entry>
  
</feed>
